generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  passwordHash String
  role        String   @default("admin")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Door {
  id        Int      @id @default(autoincrement())
  name      String
  location  String?
  clientId  String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions DoorPermission[]
  accessHistory AccessHistory[]

  @@map("doors")
}

model NfcTag {
  id        Int      @id @default(autoincrement())
  tagId     String   @unique
  name      String?
  ownerName String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions DoorPermission[]

  @@map("nfc_tags")
}

model DoorPermission {
  id        Int      @id @default(autoincrement())
  doorId    Int
  tagId     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  door Door   @relation(fields: [doorId], references: [id], onDelete: Cascade)
  tag  NfcTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([doorId, tagId])
  @@map("door_permissions")
}

model AccessHistory {
  id            Int      @id @default(autoincrement())
  doorId        Int
  tagId         String
  accessGranted Boolean
  timestamp     DateTime @default(now())
  clientIp      String?
  image         String?  // Base64 encoded image from camera

  door Door @relation(fields: [doorId], references: [id], onDelete: Cascade)

  @@map("access_history")
}